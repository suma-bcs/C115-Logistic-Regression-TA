# -*- coding: utf-8 -*-
"""logistic_final 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xu4I6rsJhxSfADAJwjRpBwNlj7j_Xdsw

# Logistic Regression

\
Today, we have some data of 1000 students that applied to a university. We know the scores of these students, and we also know if they were accepted to the university or not.

\
Can we build a model where we can predict if a student will get admitted based on their marks? Let's try!
"""

#Uploading the csv
from google.colab import files
data_to_load = files.upload()

"""Here, we have loaded the data. Let's see how the data looks like in a scatter plot -"""

import pandas as pd
import plotly.express as px

df = pd.read_csv("data.csv")

score_list = df["Score"].tolist()
accepted_list = df["Accepted"].tolist()

fig = px.scatter(x=score_list, y=accepted_list)
fig.show()

"""Using the following formula -



```
y = mc + c
```

Let's try to find out the line of regression in this plot.
"""

import numpy as np
score_array = np.array(score_list)
accepted_array = np.array(accepted_list)

#Slope and intercept using pre-built function of Numpy
m, c = np.polyfit(score_array, accepted_array, 1)

y = []
for x in score_array:
  y_value = m*x + c
  y.append(y_value)

#plotting the graph
fig = px.scatter(x=score_array, y=accepted_array)
fig.update_layout(shapes=[
    dict(
      type= 'line',
      y0= min(y), y1= max(y),
      x0= min(score_array), x1= max(score_array)
    )
])
fig.show()

"""If we look at this line, does it make sense?

\
Of course not. This graph deserves a curvy line. We can see that students up to the score of 82.7 were not accepted.

\
This graph can be better represented by the sigmoid function, which looks like this.

\
\
![alt text](https://www.researchgate.net/profile/Knut_Kvaal/publication/239269767/figure/fig2/AS:643520205430784@1530438581076/An-illustration-of-the-signal-processing-in-a-sigmoid-function.png)

\
Here, the x in the image is the value of ```mx + c```. Let's try to calculate and plot this.
"""

import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression

X = np.reshape(score_list, (len(score_list), 1))
Y = np.reshape(accepted_list, (len(accepted_list), 1))

lr = LogisticRegression()
lr.fit(X, Y)

plt.figure()
plt.scatter(X.ravel(), Y, color='black', zorder=20)

def model(x):
  return 1 / (1 + np.exp(-x))

#Using the line formula 
X_test = np.linspace(0, 100, 200)
chances = model(X_test * lr.coef_ + lr.intercept_).ravel()

plt.plot(X_test, chances, color='red', linewidth=3)
plt.axhline(y=0, color='k', linestyle='-')
plt.axhline(y=1, color='k', linestyle='-')
plt.axhline(y=0.5, color='b', linestyle='--')

# do hit and trial by changing the value of X_test
plt.axvline(x=X_test[165], color='b', linestyle='--')

plt.ylabel('y')
plt.xlabel('X')
plt.xlim(75, 85)
plt.show()

user_score = float(input("Enter your marks here:- "))
chances = model(user_score * lr.coef_ + lr.intercept_).ravel()[0]
if chances <= 0.01:
  print("The student will not get accepted")
elif chances >= 1:
  print("The student will get accepted!")
elif chances < 0.5:
  print("The student might not get accepted")
else:
  print("The student may get accepted")

